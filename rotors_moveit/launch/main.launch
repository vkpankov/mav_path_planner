<?xml version="1.0"?>

<launch>

  <!-- <env name="ROSCONSOLE_CONFIG_FILE" value="$(find quad_control)/custom_rosconsole.conf"/> -->

  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="log_file" default="rotors"/>
  <arg name="paused" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" default="obstacles"/>
  <arg name="headless" default="true"/>
  <arg name="mav_name" default="hummingbird"/>
  <arg name="db" default="true" />
  <arg name="db_path" default="$(find rotors_moveit)/default_warehouse_mongo_db" />


 <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>



  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_with_vi_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>



    </include>


    <node name="mav_linear_mpc" pkg="mav_linear_mpc" type="mav_linear_mpc_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="/vo" />
      <rosparam file="$(find mav_linear_mpc)/resources/linear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="verbose" value="true" />
      <param name="use_rc_teleop" value="false" />
    </node>

    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="/vo" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>

    <node name="pose_sensor" pkg="msf_updates" type="pose_sensor" clear_params="true" output="screen">
     <remap from="msf_updates/pose_with_covariance_input" to="/poseupdate" />
     <remap from="msf_core/imu_state_input" to="imu" />
     <rosparam file="$(find mav_linear_mpc)/resources/msf_parameters_sim.yaml"/>
  </node>

   



  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <remap from="/joint_states" to="/hummingbird/joint_states"/>	

  </group>


 <node name="action_controller" pkg="action_controller" type="action_controller">
    <remap from="/command/trajectory" to="/hummingbird/command/trajectory"/>
 </node>


 <node name="jsp" pkg="odom_to_pose_covariance" type="odom_to_pose_covariance_node">
     <remap from="/encoder_odom" to="/vo"/>
   </node>

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />


  <node pkg="tf" type="static_transform_publisher" name="map_to_world" 
    args="0.0 0.0 0.0 0.0 0.0 0.0 world /map 100" />

  <node pkg="tf" type="static_transform_publisher" name="odom_to_world" 
    args="0.0 0.0 0.0 0.0 0.0 0.0 world /odom 100" />

      <include file="$(find rotors_moveit)/launch/inertialslam.launch"/>

  <!-- RTAB Map -->
  <!-- WARNING : Database is automatically deleted on each startup -->
  <!--           See "delete_db_on_start" option below... -->

  <!-- Choose visualization -->
  <arg name="rviz" default="true" />
  <arg name="rtabmapviz" default="true" /> 

  <param name="use_sim_time" type="bool" value="True"/>  


  

  <!-- <include file="$(find mav_linear_mpc)/launch/mav_linear_mpc_sim_msf.launch">
     <arg name="mav_name" value="$(arg mav_name)"/>   
  </include>
  -->


  <include file="$(find rotors_moveit)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="false"/>
    <arg name="debug" value="$(arg debug)"/>

  </include> 

  <include file="$(find rotors_moveit)/launch/moveit_rviz.launch"/>


  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find rotors_moveit)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>

</launch>


























