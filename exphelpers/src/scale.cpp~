#include <ros/ros.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/TransformStamped.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <geometry_msgs/PointStamped.h>
#include <geometry_msgs/Vector3.h>
#include <tf2/LinearMath/Quaternion.h>
#include <tf2/LinearMath/Vector3.h>
#include <tf/transform_listener.h>
#include <tf2/convert.h>
#include <tf/transform_broadcaster.h>
#include <tf/transform_datatypes.h>
#include <string.h>
#include <std_msgs/Float64.h>
#include <cmath>

ros::Publisher scale_pub;
geometry_msgs::Pose ideal_pose;
double scale_;


void lsdslam_callback(const geometry_msgs::PoseStamped::ConstPtr& msg) {
 try {
	
	geometry_msgs::Pose pose = msg->pose;
	geometry_msgs::Vector3 scale;

	scale.z = msg->pose.position.z / ideal_pose.position.z;
	scale.y = msg->pose.position.z / ideal_pose.position.y;
	scale.x = msg->pose.position.z / ideal_pose.position.x;

	scale_pub.publish(scale);
	
      } catch ( tf::LookupException e ) {
                    std::cout << e.what() << std::endl;
      }
}


void pose_callback(const geometry_msgs::PoseStamped::ConstPtr& msg) {
	ideal_pose = msg->pose;
}

int main(int argc, char **argv) {

	ros::init(argc, argv, "pose_transform");

	ros::NodeHandle nh( ros::this_node::getName() );

	scale_pub = nh.advertise<geometry_msgs::Vector3>("/scale", 1000);

       	ros::Subscriber pose_sub = nh.subscribe("/ground_truth_to_tf/pose", 1000, &pose_callback);
	ros::Subscriber lsdslam_sub =nh.subscribe("/lsd_slam/pose", 1000, &lsdslam_callback);

	ros::spin();

	return 0;
    }
